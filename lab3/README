#Nayantara Prem, 998698351, tara.prem@mail.utoronto.ca
#Tahia Khan, 998897216, tahia.khan@mail.utoronto.ca

Part 1: generateQRCode.c
===============================================================================
To generate the QR code:
1. Pad input hex secret to atlmost 20 characters if it's less that 20 
2. Convert the input string into byte array
3. Encode the array with base32 encoding
4. Generate the url encoded values for the accountname and issuer
5. Build the hotp and totp url strings with the above generated values
6. Generate the 2 QR codes with the 2 strings 


Part 2: validateQRCode.c
===============================================================================

Validate HOTP:

1)  Convert secret_hex, which is a string of 20 hex characters, to a byte 
	array of size 10. 
2)  To compute the HMAC, the following transformation must be performed:
	SHA1(key XOR opad, SHA1(key XOR ipad, message))
2a) Compute the block for the inner part of the digest by padding the key the full 
	block length of 64 bytes, and then XOR'ing each byte with 0x36
2b) Compute the block for the outer part of the digest by padding the key the full 
	block length of 64 bytes, and then XOR'ing each byte with 0x5c
3)  Compute the inner digest by concatenating the inner block with a counter (set to
	1). The result is a 20 byte digest. 
4)  Compute the outer digest by concatenating the outer block with the inner digest.
	Convert this to a binary value. The first 6 digits are the final result.
5)  Check for equality between the result and the given HOTP string.

Validate TOTP:

1)  Convert secret_hex, which is a string of 20 hex characters, to a byte 
	array of size 10. 
2)  To compute the HMAC, the following transformation must be performed:
	SHA1(key XOR opad, SHA1(key XOR ipad, message))
2a) Compute the block for the inner part of the digest by padding the key the full 
	block length of 64 bytes, and then XOR'ing each byte with 0x36
2b) Compute the block for the outer part of the digest by padding the key the full 
	block length of 64 bytes, and then XOR'ing each byte with 0x5c
3)  Compute the current time step (time()/30) and convert this value into an 8-byte 
	array containing the binary value for the time step.
3)  Compute the inner digest by concatenating the inner block with a time step byte
	array. The result is a 20 byte digest. 
4)  Compute the outer digest by concatenating the outer block with the inner digest.
	Convert this to a binary value. The first 6 digits are the final result.
5)  Check for equality between the result and the given TOTP string.

