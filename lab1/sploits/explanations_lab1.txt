#Nayantara Prem, 998698351, tara.prem@mail.utoronto.ca
#Tahia Khan, 998897216, tahia.khan@mail.utoronto.ca
______
Sploit1
This is a regular buffer overflow exploit. The vulnerability in target1 is in strcpy which is done without any bounds check. We pass in a buffer with the following structure:

[--NOPSLED--][-----SHELLCODE-----][--RETURN ADDR 0x2021fe10--]
0           18                  63                         123                   
This buffer copied into the address of 'buf' the stack frame of lab_main in target1. Since there is no bounds check on the buffer, strcpy will overwrite the contents of lab_main's return address with the start address of buf, which holds the shell code.
_______
Sploit2
The vulnerability in this program is that target buffer is 256B but the program allows copying values upto 272B. We exploit the fact that this copying is controlled by the loop variables i and len which are local variables stored on the stack. As 272 is not large enough, we overwrite len with a large enough value to reach the address where the return address is stored and write i to continue looping. We pass in the return address as an environment variable.
Buffer:
[--NOPSLED--][-----SHELLCODE-----][--NOPSLED--][--i 267--][--len 283--]
Env[1]:
[--NOPSLED--][--RETURN ADDR 0x2021fd40--]
______
Sploit3
The vulnerability in this target is that buf is defined with size 64 in foo() but but bar() copies 88 characters to buf. So this exploit is much like sploit1 because we can fit the exploit and overwrite the return address of foo() within the 88 characters provided.
Buf:
[--NOPSLED--][-----SHELLCODE-----][--NOPSLED--][--RETURN ADDR 0x2021fe10--]
_______
Sploit4
This exploit is similar to sploit2, except now the bounds check enforces a max length of 169. Since the copying of the buffer will terminate at the 169th iteration of the copying loop, after we reach the first byte of 'len', we just overwrite len with a large value to ensure that the loop doesn't terminate and then overwrite i with a value that is (len+20) so that the copying of the buf terminates at the 189th iteration. At this point the return address of foo will is overwritten with the start address of the buffer, which holds the shellcode. 
